--- a/ustream-openssl.c
+++ b/ustream-openssl.c
@@ -19,9 +19,66 @@
 #include <string.h>
 #include <ctype.h>
 #include <openssl/x509v3.h>
+#include <openssl/bn.h>
 #include "ustream-ssl.h"
 #include "ustream-internal.h"
 
+#ifndef NO_DH
+DH *get_dh2048()
+{
+	static unsigned char dh2048_p[]={
+		0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xAD,0xF8,0x54,0x58,
+		0xA2,0xBB,0x4A,0x9A,0xAF,0xDC,0x56,0x20,0x27,0x3D,0x3C,0xF1,
+		0xD8,0xB9,0xC5,0x83,0xCE,0x2D,0x36,0x95,0xA9,0xE1,0x36,0x41,
+		0x14,0x64,0x33,0xFB,0xCC,0x93,0x9D,0xCE,0x24,0x9B,0x3E,0xF9,
+		0x7D,0x2F,0xE3,0x63,0x63,0x0C,0x75,0xD8,0xF6,0x81,0xB2,0x02,
+		0xAE,0xC4,0x61,0x7A,0xD3,0xDF,0x1E,0xD5,0xD5,0xFD,0x65,0x61,
+		0x24,0x33,0xF5,0x1F,0x5F,0x06,0x6E,0xD0,0x85,0x63,0x65,0x55,
+		0x3D,0xED,0x1A,0xF3,0xB5,0x57,0x13,0x5E,0x7F,0x57,0xC9,0x35,
+		0x98,0x4F,0x0C,0x70,0xE0,0xE6,0x8B,0x77,0xE2,0xA6,0x89,0xDA,
+		0xF3,0xEF,0xE8,0x72,0x1D,0xF1,0x58,0xA1,0x36,0xAD,0xE7,0x35,
+		0x30,0xAC,0xCA,0x4F,0x48,0x3A,0x79,0x7A,0xBC,0x0A,0xB1,0x82,
+		0xB3,0x24,0xFB,0x61,0xD1,0x08,0xA9,0x4B,0xB2,0xC8,0xE3,0xFB,
+		0xB9,0x6A,0xDA,0xB7,0x60,0xD7,0xF4,0x68,0x1D,0x4F,0x42,0xA3,
+		0xDE,0x39,0x4D,0xF4,0xAE,0x56,0xED,0xE7,0x63,0x72,0xBB,0x19,
+		0x0B,0x07,0xA7,0xC8,0xEE,0x0A,0x6D,0x70,0x9E,0x02,0xFC,0xE1,
+		0xCD,0xF7,0xE2,0xEC,0xC0,0x34,0x04,0xCD,0x28,0x34,0x2F,0x61,
+		0x91,0x72,0xFE,0x9C,0xE9,0x85,0x83,0xFF,0x8E,0x4F,0x12,0x32,
+		0xEE,0xF2,0x81,0x83,0xC3,0xFE,0x3B,0x1B,0x4C,0x6F,0xAD,0x73,
+		0x3B,0xB5,0xFC,0xBC,0x2E,0xC2,0x20,0x05,0xC5,0x8E,0xF1,0x83,
+		0x7D,0x16,0x83,0xB2,0xC6,0xF3,0x4A,0x26,0xC1,0xB2,0xEF,0xFA,
+		0x88,0x6B,0x42,0x38,0x61,0x28,0x5C,0x97,0xFF,0xFF,0xFF,0xFF,
+		0xFF,0xFF,0xFF,0xFF,
+	};
+	static unsigned char dh2048_g[]={
+		0x02,
+	};
+	DH *dh = DH_new();
+	BIGNUM *dhp_bn, *dhg_bn;
+
+	if (dh == NULL)
+		return NULL;
+	dhp_bn=BN_bin2bn(dh2048_p,sizeof(dh2048_p),NULL);
+	dhg_bn=BN_bin2bn(dh2048_g,sizeof(dh2048_g),NULL);
+
+# if OPENSSL_VERSION_NUMBER >= 0x10100000L
+	if (dhp_bn == NULL || dhg_bn == NULL
+		|| !DH_set0_pqg(dh, dhp_bn, NULL, dhg_bn))
+# else
+	dh->p=dhp_bn;
+	dh->g=dhg_bn;
+	if ((dh->p == NULL) || (dh->g == NULL))
+# endif
+	{
+		DH_free(dh);
+		BN_free(dhp_bn);
+		BN_free(dhg_bn);
+		return NULL;
+	}
+        return dh;
+}
+#endif
+
 __hidden struct ustream_ssl_ctx *
 __ustream_ssl_context_new(bool server)
 {
@@ -38,6 +95,7 @@ __ustream_ssl_context_new(bool server)
 	}
 # ifdef CYASSL_OPENSSL_H_
 #  define TLS_server_method SSLv23_server_method
+#  define SSL_CTX_set1_curves_list wolfSSL_CTX_set1_curves_list
 # else
 #  define TLS_server_method TLSv1_2_server_method
 # endif
@@ -54,15 +112,26 @@ __ustream_ssl_context_new(bool server)
 		return NULL;
 
 	SSL_CTX_set_verify(c, SSL_VERIFY_NONE, NULL);
-#if !defined(OPENSSL_NO_ECDH) && !defined(CYASSL_OPENSSL_H_) && OPENSSL_VERSION_NUMBER < 0x10100000L
+#if OPENSSL_VERSION_NUMBER < 0x10100000L
+# ifndef OPENSSL_NO_ECDH
+	if (server)
+		SSL_CTX_set1_curves_list(c, "prime256v1:secp384r1:secp521r1");
+#  if OPENSSL_VERSION_NUMBER >= 0x10002000L
 	SSL_CTX_set_ecdh_auto(c, 1);
-#endif
+#  endif
+# endif
+	SSL_CTX_set_options (c, SSL_OP_ALL | SSL_OP_NO_SSLv2 | SSL_OP_NO_SSLv3 | SSL_OP_NO_TICKET | SSL_OP_SINGLE_DH_USE |
+			     SSL_OP_SINGLE_ECDH_USE | SSL_OP_CIPHER_SERVER_PREFERENCE | SSL_OP_NO_COMPRESSION );
+#else
+	SSL_CTX_set_options (c, SSL_OP_ALL | SSL_OP_NO_TICKET | SSL_OP_CIPHER_SERVER_PREFERENCE );
 	if (server) {
-#if OPENSSL_VERSION_NUMBER >= 0x10100000L
+# ifndef OPENSSL_NO_ECDH
+		SSL_CTX_set1_curves_list(c, "x25519:prime256v1:secp384r1:secp521r1");
+# endif
 		SSL_CTX_set_min_proto_version(c, TLS1_2_VERSION);
-#endif
-		SSL_CTX_set_cipher_list(c, "DEFAULT:!RC4:@STRENGTH");
 	}
+#endif
+	SSL_CTX_set_cipher_list(c, SSLCIPHERLIST);
 	SSL_CTX_set_quiet_shutdown(c, 1);
 
 	return (void *) c;
--- a/ustream-openssl.h
+++ b/ustream-openssl.h
@@ -23,6 +23,16 @@
 #include <openssl/err.h>
 #include <stdbool.h>
 
+#ifndef NO_DH
+# ifndef HEADER_DH_H
+# include <openssl/dh.h>
+# endif
+
+DH *get_dh2048();
+#endif /* NO_DH */
+
+#define SSLCIPHERLIST "ECDHE-ECDSA-CHACHA20-POLY1305:ECDHE-RSA-CHACHA20-POLY1305:ECDHE-ECDSA-CHACHA20-POLY1305-D:ECDHE-RSA-CHACHA20-POLY1305-D:ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-RSA-AES128-GCM-SHA256:ECDHE-ECDSA-AES256-GCM-SHA384:ECDHE-RSA-AES256-GCM-SHA384:DHE-RSA-AES128-GCM-SHA256:DHE-RSA-AES256-GCM-SHA384:ECDHE-ECDSA-AES128-SHA256:ECDHE-RSA-AES128-SHA256:ECDHE-ECDSA-AES128-SHA:ECDHE-RSA-AES256-SHA384:ECDHE-RSA-AES128-SHA:ECDHE-ECDSA-AES256-SHA384:ECDHE-ECDSA-AES256-SHA:ECDHE-RSA-AES256-SHA:DHE-RSA-AES128-SHA256:DHE-RSA-AES128-SHA:DHE-RSA-AES256-SHA256:DHE-RSA-AES256-SHA:ECDHE-ECDSA-DES-CBC3-SHA:ECDHE-RSA-DES-CBC3-SHA:EDH-RSA-DES-CBC3-SHA:AES128-GCM-SHA256:AES256-GCM-SHA384:AES128-SHA256:AES256-SHA256:AES128-SHA:AES256-SHA:DES-CBC3-SHA"
+
 void __ustream_ssl_session_free(void *ssl);
 
 static inline void *__ustream_ssl_session_new(void *ctx)
