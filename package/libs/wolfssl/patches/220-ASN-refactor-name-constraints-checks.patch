From 0000000000000000000000000000000000000000 Mon Sep 17 00:00:00 2001
From: Luiz Angelo Daros de Luca <luizluca@gmail.com>
Date: Wed, 3 Nov 2021 20:37:42 -0300
Subject: [PATCH] ASN: refactor name constraints checks

Use the same logic for any type of name constraint.

It could be even cleaner if there were a altNamesByType[],
permittedNamesByType[] and excludedNamesByType[] in cert.

Signed-off-by: Luiz Angelo Daros de Luca <luizluca@gmail.com>
(cherry picked from commit 01335e2e1ca325d0927e5e9845e70ad9cc1cfb88)

diff --git a/wolfcrypt/src/asn.c b/wolfcrypt/src/asn.c
index 966035f5b..d52607b3b 100644
--- a/wolfcrypt/src/asn.c
+++ b/wolfcrypt/src/asn.c
@@ -7686,8 +7686,13 @@ static int MatchBaseName(int type, const char* name, int nameSz,
 {
     if (base == NULL || baseSz <= 0 || name == NULL || nameSz <= 0 ||
             name[0] == '.' || nameSz < baseSz ||
-            (type != ASN_RFC822_TYPE && type != ASN_DNS_TYPE))
+            (type != ASN_RFC822_TYPE && type != ASN_DNS_TYPE &&
+	     type != ASN_DIR_TYPE)) {
         return 0;
+    }
+
+    if (type == ASN_DIR_TYPE)
+        return XMEMCMP(name, base, baseSz) == 0;
 
     /* If an email type, handle special cases where the base is only
      * a domain, or is an email address itself. */
@@ -7746,157 +7751,99 @@ static int MatchBaseName(int type, const char* name, int nameSz,
 
 static int ConfirmNameConstraints(Signer* signer, DecodedCert* cert)
 {
+    const byte nameTypes[] = {ASN_RFC822_TYPE, ASN_DNS_TYPE, ASN_DIR_TYPE};
+    int i;
+
     if (signer == NULL || cert == NULL)
         return 0;
 
-    /* Check against the excluded list */
-    if (signer->excludedNames) {
-        Base_entry* base = signer->excludedNames;
+    if (signer->excludedNames == NULL && signer->permittedNames == NULL)
+        return 1;
 
-        while (base != NULL) {
-            switch (base->type) {
-                case ASN_DNS_TYPE:
-                {
-                    DNS_entry* name = cert->altNames;
-                    while (name != NULL) {
-                        if (MatchBaseName(ASN_DNS_TYPE,
-                                          name->name, name->len,
-                                          base->name, base->nameSz)) {
-                            return 0;
-                        }
-                        name = name->next;
-                    }
-                    break;
-                }
-                case ASN_RFC822_TYPE:
-                {
-                    DNS_entry* name = cert->altEmailNames;
-                    while (name != NULL) {
-                        if (MatchBaseName(ASN_RFC822_TYPE,
-                                          name->name, name->len,
-                                          base->name, base->nameSz)) {
-                            return 0;
-                        }
-                        name = name->next;
-                    }
-                    break;
-                }
-                case ASN_DIR_TYPE:
-                {
-                    /* allow permitted dirName smaller than actual subject */
-                    if (cert->subjectRawLen >= base->nameSz &&
-                        XMEMCMP(cert->subjectRaw, base->name,
-                                                        base->nameSz) == 0) {
-                        return 0;
-                    }
-                    #ifndef WOLFSSL_NO_ASN_STRICT
-                    /* RFC 5280 section 4.2.1.10
-                       "Restrictions of the form directoryName MUST be
-                        applied to the subject field .... and to any names
-                        of type directoryName in the subjectAltName
-                        extension"
-                    */
-                    if (cert->altDirNames != NULL) {
-                        DNS_entry* cur = cert->altDirNames;
-                        while (cur != NULL) {
-                            if (XMEMCMP(cur->name, base->name, base->nameSz)
-                                    == 0) {
-                                WOLFSSL_MSG("DIR alt name constraint err");
-                                return 0;
-                            }
-                            cur = cur->next;
-                        }
-                    }
-                    #endif /* !WOLFSSL_NO_ASN_STRICT */
-                    break;
+    for (i=0; i < (int)sizeof(nameTypes); i++) {
+        byte nameType = nameTypes[i];
+        DNS_entry* name = NULL;
+        DNS_entry  subjectDnsName;
+        Base_entry* base;
+
+        switch (nameType) {
+            case ASN_DNS_TYPE:
+                /* Should it also consider CN in subject? It could use
+                 * subjectDnsName too */
+                name = cert->altNames;
+                break;
+            case ASN_RFC822_TYPE:
+                /* Shouldn't it validade E= in subject as well? */
+                name = cert->altEmailNames;
+                break;
+            case ASN_DIR_TYPE:
+                if (cert->subjectRaw != NULL) {
+                    subjectDnsName.next = NULL;
+                    subjectDnsName.type = ASN_DIR_TYPE;
+                    subjectDnsName.len = cert->subjectRawLen;
+                    subjectDnsName.name = (char *)cert->subjectRaw;
+                    name = &subjectDnsName;
                 }
-            }; /* switch */
-            base = base->next;
-        }
-    }
 
-    /* Check against the permitted list */
-    if (signer->permittedNames != NULL) {
-        int needDns = 0;
-        int matchDns = 0;
-        int needEmail = 0;
-        int matchEmail = 0;
-        int needDir = 0;
-        int matchDir = 0;
-        Base_entry* base = signer->permittedNames;
-
-        while (base != NULL) {
-            switch (base->type) {
-                case ASN_DNS_TYPE:
-                {
-                    DNS_entry* name = cert->altNames;
+                #ifndef WOLFSSL_NO_ASN_STRICT
+                /* RFC 5280 section 4.2.1.10
+                    "Restrictions of the form directoryName MUST be
+                    applied to the subject field .... and to any names
+                    of type directoryName in the subjectAltName
+                    extension"
+                */
+                if (name != NULL)
+                    name->next = cert->altDirNames;
+                else
+                    name = cert->altDirNames;
+                #endif
+                break;
+            default:
+                /* Other types of names are ignored for now.
+                 * Shouldn't it be rejected if it there is a altNamesByType[nameType]
+                 * and signer->extNameConstraintCrit is set? */
+                return 0;
+        }
 
-                    if (name != NULL)
-                        needDns = 1;
+        while (name != NULL) {
+            int match = 0;
+            int need = 0;
 
-                    while (name != NULL) {
-                        matchDns = MatchBaseName(ASN_DNS_TYPE,
-                                          name->name, name->len,
-                                          base->name, base->nameSz);
-                        name = name->next;
+            base = signer->excludedNames;
+            /* Check against the excluded list */
+            while (base != NULL) {
+                if (base->type == nameType) {
+                    if (name->len >= base->nameSz &&
+                        MatchBaseName(nameType,
+                                      name->name, name->len,
+                                      base->name, base->nameSz)) {
+                            return 0;
                     }
                     break;
                 }
-                case ASN_RFC822_TYPE:
-                {
-                    DNS_entry* name = cert->altEmailNames;
-
-                    if (name != NULL)
-                        needEmail = 1;
+                base = base->next;
+            }
 
-                    while (name != NULL) {
-                        matchEmail = MatchBaseName(ASN_DNS_TYPE,
-                                          name->name, name->len,
-                                          base->name, base->nameSz);
-                        name = name->next;
-                    }
-                    break;
-                }
-                case ASN_DIR_TYPE:
-                {
-                    /* allow permitted dirName smaller than actual subject */
-                    needDir = 1;
-                    if (cert->subjectRaw != NULL &&
-                        cert->subjectRawLen >= base->nameSz &&
-                        XMEMCMP(cert->subjectRaw, base->name,
-                                                        base->nameSz) == 0) {
-                        matchDir = 1;
-
-                        #ifndef WOLFSSL_NO_ASN_STRICT
-                        /* RFC 5280 section 4.2.1.10
-                           "Restrictions of the form directoryName MUST be
-                            applied to the subject field .... and to any names
-                            of type directoryName in the subjectAltName
-                            extension"
-                        */
-                        if (cert->altDirNames != NULL) {
-                            DNS_entry* cur = cert->altDirNames;
-                            while (cur != NULL) {
-                                if (XMEMCMP(cur->name, base->name, base->nameSz)
-                                        != 0) {
-                                    WOLFSSL_MSG("DIR alt name constraint err");
-                                    matchDir = 0; /* did not match */
-                                }
-                                cur = cur->next;
-                            }
-                        }
-                        #endif /* !WOLFSSL_NO_ASN_STRICT */
+            /* Check against the permitted list */
+            base = signer->permittedNames;
+            while (base != NULL) {
+                if (base->type == nameType) {
+                    need = 1;
+                    if (name->len >= base->nameSz &&
+                        MatchBaseName(nameType,
+                                      name->name, name->len,
+                                      base->name, base->nameSz)) {
+                            match = 1;
+                            break;
                     }
-                    break;
                 }
-            } /* switch */
-            base = base->next;
-        }
+                base = base->next;
+            }
 
-        if ((needDns   && !matchDns) ||
-            (needEmail && !matchEmail) ||
-            (needDir   && !matchDir)) {
-            return 0;
+            if (need && !match)
+                return 0;
+
+            name = name->next;
         }
     }
 
